//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
//::                                                                         ::
//::     Antonio Manuel Rodrigues Manso                                      ::
//::                                                                         ::
//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
//::     Escola Superior de Tecnologia de Tomar                              ::
//::     e-mail: manso@ipt.pt                                                ::
//::     url   : http://orion.ipt.pt/~manso                                  ::
//::                                                                         ::
//::     This software was build with the purpose of investigate and         ::
//::     learning.                                                           ::
//::                                                                         ::
//::                                                               (c)2015   ::
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//////////////////////////////////////////////////////////////////////////////
package p2p;

import CurriculumDigital.Core.User;
import CurriculumDigital.GUI.FormCurriculumDigital;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import blockchain.utils.GuiUtils;
import blockchain.utils.RMI;
import java.io.File;
import java.util.Base64;
import javax.swing.DefaultListModel;

/**
 *
 * @author zulu
 */
public class NodeP2PGui extends javax.swing.JFrame implements P2Plistener {

    OremoteP2P myremoteObject;

    /**
     * Creates new form MessengerGUI
     */
    public NodeP2PGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnServer = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btStartServer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        txtServerListeningPort = new javax.swing.JTextField();
        txtServerListeningObjectName = new javax.swing.JTextField();
        imgServerRunning = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServerLog = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        txtNodeAddress = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNetwork = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtLstTransdactions = new javax.swing.JTextArea();
        txtTranaction = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtPublicKey = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtLoginUser = new javax.swing.JTextField();
        txtLoginPass = new javax.swing.JPasswordField();
        btLogin = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRegisterUser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRegisterPass = new javax.swing.JPasswordField();
        btRegister = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnServer.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout(10, 10));

        btStartServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/startServer.png"))); // NOI18N
        btStartServer.setText("Start");
        btStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartServerActionPerformed(evt);
            }
        });
        jPanel3.add(btStartServer, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.GridLayout(2, 0));

        txtServerListeningPort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtServerListeningPort.setText("10010");
        txtServerListeningPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port Number"));
        txtServerListeningPort.setPreferredSize(new java.awt.Dimension(200, 36));
        jPanel7.add(txtServerListeningPort);

        txtServerListeningObjectName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtServerListeningObjectName.setText("remoteP2P");
        txtServerListeningObjectName.setBorder(javax.swing.BorderFactory.createTitledBorder("ObjectName"));
        jPanel7.add(txtServerListeningObjectName);

        jPanel3.add(jPanel7, java.awt.BorderLayout.CENTER);

        imgServerRunning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/loading_green.gif"))); // NOI18N
        imgServerRunning.setEnabled(false);
        jPanel3.add(imgServerRunning, java.awt.BorderLayout.EAST);

        pnServer.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        txtServerLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Log Server"));
        txtServerLog.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(txtServerLog);

        pnServer.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Server", pnServer);

        txtNodeAddress.setText("//10.10.208.35:10010/remoteP2P");
        txtNodeAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNodeAddressActionPerformed(evt);
            }
        });

        jButton1.setText("Connect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtNetwork.setColumns(20);
        txtNetwork.setRows(5);
        jScrollPane2.setViewportView(txtNetwork);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtNodeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNodeAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("P2pNetwork", jPanel2);

        txtLstTransdactions.setColumns(20);
        txtLstTransdactions.setRows(5);
        jScrollPane3.setViewportView(txtLstTransdactions);

        txtTranaction.setText("transaction to network");

        jButton2.setText("Add");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 129, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtTranaction, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTranaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Transaction", jPanel4);

        txtPublicKey.setEditable(false);
        txtPublicKey.setColumns(20);
        txtPublicKey.setRows(5);
        jScrollPane4.setViewportView(txtPublicKey);

        jLabel1.setText("Username");

        jLabel2.setText("password");

        txtLoginUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtLoginPass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btLogin.setText("Login");
        btLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoginActionPerformed(evt);
            }
        });

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Users"));

        lstUsers.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lstUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(lstUsers);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(txtLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btLogin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(txtLoginPass, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLoginPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(btLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Login", jPanel5);

        jLabel3.setText("Username");

        txtRegisterUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel4.setText("password");

        txtRegisterPass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btRegister.setText("Registar");
        btRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRegisterPass))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegisterPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btRegister)
                .addContainerGap(160, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registar", jPanel6);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartServerActionPerformed
        try {
            int port = Integer.parseInt(txtServerListeningPort.getText());
            String name = txtServerListeningObjectName.getText();
            //local adress of server
            String host = " 192.168.1.129"; //InetAddress.getByName("localhost").getHostAddress();  //.InetAddress.getLocalHost().getHostAddress();
            //create registry to object
            LocateRegistry.createRegistry(port);
            //create adress of remote object
            String address = String.format("//%s:%d/%s", host, port, name);
            myremoteObject = new OremoteP2P(address, this);
            //link adress to object
            Naming.rebind(address, myremoteObject);
        } catch (Exception ex) {
            onException(ex, "Starting server");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btStartServerActionPerformed

    private void txtNodeAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNodeAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNodeAddressActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String address = txtNodeAddress.getText().trim();

            // Remover a palavra "Object" e quaisquer espaços adicionais
            if (address.startsWith("Object")) {
                address = address.replace("Object", "").trim();
            }

            // Se ainda houver "listening" no final, removê-lo também
            if (address.endsWith("listening")) {
                address = address.replace("listening", "").trim();
            }

            System.out.println(address);
            IremoteP2P node = (IremoteP2P) RMI.getRemote(address);
            myremoteObject.addNode(node);
        } catch (Exception ex) {
            onException(ex, "connect");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            myremoteObject.addTransaction(txtTranaction.getText());
        } catch (RemoteException ex) {
            onException(ex, "transactions");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoginActionPerformed

        
        try {
            if (txtLoginUser.getText().isEmpty() || txtLoginPass.getPassword().length == 0) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos");
                return;
            }

            String username = txtLoginUser.getText();
            String password = new String(txtLoginPass.getPassword());

            boolean isValid = false;
            for (IremoteP2P node : myremoteObject.getNetwork()) {
                if (node.validateUser(username, password)) {
                    isValid = true;
                    break;
                }
            }

            if (isValid) {
                JOptionPane.showMessageDialog(this, "Login bem-sucedido!");
                // Prossiga para a próxima tela ou funcionalidade
            } else {
                JOptionPane.showMessageDialog(this, "Credenciais inválidas!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao realizar login: " + ex.getMessage());
        }
    }//GEN-LAST:event_btLoginActionPerformed

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstUsersValueChanged
        if (!evt.getValueIsAdjusting()) {
            // Obter o valor selecionado da lista
            String selectedUser = (String) lstUsers.getSelectedValue();

            // Verificar se há um item selecionado antes de definir o valor no campo de texto
            if (selectedUser != null) {
                txtLoginUser.setText(selectedUser);
            }
        }
    }//GEN-LAST:event_lstUsersValueChanged

    private void btRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegisterActionPerformed

        try {
            if (txtRegisterUser.getText().isEmpty() || txtRegisterPass.getPassword().length == 0) {
                JOptionPane.showMessageDialog(this, "Preencha todos os campos");
                return;
            }
            User newUser = new User(txtRegisterUser.getText());
            newUser.generateKeys();
            newUser.save(new String(txtRegisterPass.getPassword()));

            myremoteObject.registerUser(newUser); // Registra o usuário no servidor
            // Atualiza a lista de usuários
            loadUsersFromFiles();
            JOptionPane.showMessageDialog(this, "Usuário registrado com sucesso!");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao registrar o usuário: " + ex.getMessage());
            txtRegisterUser.setText("");
            txtRegisterPass.setText("");
        }
    }//GEN-LAST:event_btRegisterActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NodeP2PGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NodeP2PGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NodeP2PGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NodeP2PGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NodeP2PGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLogin;
    private javax.swing.JButton btRegister;
    private javax.swing.JButton btStartServer;
    private javax.swing.JLabel imgServerRunning;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JList<String> lstUsers;
    private javax.swing.JPanel pnServer;
    private javax.swing.JPasswordField txtLoginPass;
    private javax.swing.JTextField txtLoginUser;
    private javax.swing.JTextArea txtLstTransdactions;
    private javax.swing.JTextArea txtNetwork;
    private javax.swing.JTextField txtNodeAddress;
    private javax.swing.JTextArea txtPublicKey;
    private javax.swing.JPasswordField txtRegisterPass;
    private javax.swing.JTextField txtRegisterUser;
    private javax.swing.JTextField txtServerListeningObjectName;
    private javax.swing.JTextField txtServerListeningPort;
    private javax.swing.JTextPane txtServerLog;
    private javax.swing.JTextField txtTranaction;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onStart(String message) {
        imgServerRunning.setEnabled(true);
        btStartServer.setEnabled(false);
        GuiUtils.addText(txtServerLog, "Start server", message);
    }

    public void onException(Exception e, String title) {
        JOptionPane.showMessageDialog(this, e.getMessage(), title, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void onConect(String address) {
        try {
            List<IremoteP2P> net = myremoteObject.getNetwork();
            String txt = "";
            for (IremoteP2P iremoteP2P : net) {
                txt += iremoteP2P.getAdress() + "\n";
            }
            txtNetwork.setText(txt);
        } catch (RemoteException ex) {
            onException(ex, "On conect");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void onTransaction(String transaction) {
        try {
            String txt = "";
            List<String> tr = myremoteObject.getTransactions();
            for (String string : tr) {
                txt += string + "\n";

            }
            txtLstTransdactions.setText(txt);
        } catch (RemoteException ex) {
            onException(ex, "on transaction");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadUsersFromFiles() {
        try {
            // Defina o caminho correto onde os arquivos de usuários estão sendo salvos
            File dir = new File("keys/");

            // Cria um novo modelo para a JList
            DefaultListModel<String> userListModel = new DefaultListModel<>();

            // Filtra os arquivos que possuem a extensão ".pub" (chaves públicas)
            File[] files = dir.listFiles((d, name) -> name.endsWith(".pub"));

            // Verifica se existem arquivos .pub encontrados
            if (files != null && files.length > 0) {
                for (File file : files) {
                    // Extrai o nome do arquivo sem a extensão .pub (nome do usuário)
                    String fileName = file.getName();
                    String userName = fileName.substring(0, fileName.lastIndexOf('.'));

                    // Adiciona o nome do usuário ao modelo
                    userListModel.addElement(userName);
                    
                    myremoteObject.users.add(new User(userName));
                }

                // Define o modelo da JList com os nomes dos usuários
                lstUsers.setModel(userListModel);
            } else {
                JOptionPane.showMessageDialog(this, "Nenhum arquivo de usuário .pub encontrado.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao carregar usuários.");
        }
    }

}
