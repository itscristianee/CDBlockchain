/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package CurriculumDigital.GUI;

import CurriculumDigital.Core.Evento;
import CurriculumDigital.Core.User;
import blockchain.utils.Block;
import blockchain.utils.BlockChain;
import blockchain.utils.MerkleTree;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author cristiane
 */
public class FormAntigo extends javax.swing.JFrame {

    BlockChain bloco;
    User myUser = null;
    MerkleTree mt;
    // Lista de eventos que é mantida durante a execução
    private List<Evento> lstEventos;
    private List<Evento> lstBuffer;
    private DefaultListModel listModel;
    String nome;
    

    /**
     * Creates new form NewJFrame
     */
    public FormAntigo() {
        initComponents();
        bloco = new BlockChain();
        mt = new MerkleTree();
        lstBuffer = new ArrayList<>();
        lstEventos = new ArrayList<>();
        listModel = new DefaultListModel();
    }

    public FormAntigo(User u) {
        this();
        this.myUser = u;
        this.entidadeField.setText(u.getName());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        jTabbedPessoas = new javax.swing.JTabbedPane();
        panel2 = new java.awt.Panel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtEventos = new javax.swing.JTextArea();
        nomePessoaField = new javax.swing.JTextField();
        descricaoEventoField = new javax.swing.JTextField();
        entidadeField = new javax.swing.JTextField();
        spNovoBlockDificuldade = new javax.swing.JSpinner();
        btnGerarBloco = new javax.swing.JButton();
        txtFileName = new javax.swing.JTextField();
        btSave = new javax.swing.JButton();
        btLoad = new javax.swing.JButton();
        addEventoButton = new javax.swing.JButton();
        viewCurrListPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstBlockchain = new javax.swing.JList<>();
        merkleGraphics1 = new blockchain.GUI.MerkleGraphics();
        panel3 = new java.awt.Panel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lstPessoas = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtCurriculums = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPessoas.setToolTipText("");
        jTabbedPessoas.setName(""); // NOI18N
        jTabbedPessoas.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPessoasStateChanged(evt);
            }
        });

        txtEventos.setEditable(false);
        txtEventos.setColumns(20);
        txtEventos.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtEventos.setRows(5);
        txtEventos.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de eventos"));
        txtEventos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtEventosKeyTyped(evt);
            }
        });
        jScrollPane6.setViewportView(txtEventos);

        nomePessoaField.setToolTipText("");
        nomePessoaField.setBorder(javax.swing.BorderFactory.createTitledBorder("Nome da Pessoa"));
        nomePessoaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomePessoaFieldActionPerformed(evt);
            }
        });

        descricaoEventoField.setToolTipText("");
        descricaoEventoField.setBorder(javax.swing.BorderFactory.createTitledBorder("Descrição do Evento"));
        descricaoEventoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descricaoEventoFieldActionPerformed(evt);
            }
        });

        entidadeField.setEditable(false);
        entidadeField.setToolTipText("");
        entidadeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Entidade Certificadora"));
        entidadeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entidadeFieldActionPerformed(evt);
            }
        });

        spNovoBlockDificuldade.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        spNovoBlockDificuldade.setModel(new javax.swing.SpinnerNumberModel(3, 1, 7, 1));
        spNovoBlockDificuldade.setBorder(javax.swing.BorderFactory.createTitledBorder("Dificulty"));

        btnGerarBloco.setText("Gerar Bloco");
        btnGerarBloco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarBlocoActionPerformed(evt);
            }
        });

        txtFileName.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtFileName.setText("./blockchain.obj");
        txtFileName.setBorder(javax.swing.BorderFactory.createTitledBorder("File Name"));
        txtFileName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFileNameKeyTyped(evt);
            }
        });

        btSave.setText("Save");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btLoad.setText("Load");
        btLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoadActionPerformed(evt);
            }
        });

        addEventoButton.setText("Adicionar Evento(s)");
        addEventoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEventoButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGerarBloco, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(descricaoEventoField)
                            .addComponent(entidadeField)
                            .addComponent(nomePessoaField)
                            .addGroup(panel2Layout.createSequentialGroup()
                                .addComponent(spNovoBlockDificuldade, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addEventoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 71, Short.MAX_VALUE))
                            .addComponent(txtFileName))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69))
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane6))
                    .addGroup(panel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(nomePessoaField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(descricaoEventoField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(entidadeField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(spNovoBlockDificuldade, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                            .addComponent(addEventoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGerarBloco, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(txtFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(30, 30, 30))
        );

        spNovoBlockDificuldade.getAccessibleContext().setAccessibleName("Dificuldade");
        txtFileName.getAccessibleContext().setAccessibleName("Nome do Ficheiro");

        jTabbedPessoas.addTab("Adicionar Evento(s)", panel2);

        lstBlockchain.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBlockchainValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstBlockchain);

        javax.swing.GroupLayout merkleGraphics1Layout = new javax.swing.GroupLayout(merkleGraphics1);
        merkleGraphics1.setLayout(merkleGraphics1Layout);
        merkleGraphics1Layout.setHorizontalGroup(
            merkleGraphics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 471, Short.MAX_VALUE)
        );
        merkleGraphics1Layout.setVerticalGroup(
            merkleGraphics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(496, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(187, Short.MAX_VALUE)
                    .addComponent(merkleGraphics1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(merkleGraphics1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout viewCurrListPanelLayout = new javax.swing.GroupLayout(viewCurrListPanel);
        viewCurrListPanel.setLayout(viewCurrListPanelLayout);
        viewCurrListPanelLayout.setHorizontalGroup(
            viewCurrListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCurrListPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        viewCurrListPanelLayout.setVerticalGroup(
            viewCurrListPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewCurrListPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        jTabbedPessoas.addTab("Ver Prova", viewCurrListPanel);

        lstPessoas.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstPessoasValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(lstPessoas);

        txtCurriculums.setEditable(false);
        txtCurriculums.setColumns(20);
        txtCurriculums.setFont(new java.awt.Font("Courier New", 1, 18)); // NOI18N
        txtCurriculums.setRows(5);
        txtCurriculums.setBorder(javax.swing.BorderFactory.createTitledBorder("Curriculums"));
        txtCurriculums.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCurriculumsKeyTyped(evt);
            }
        });
        jScrollPane7.setViewportView(txtCurriculums);

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(174, Short.MAX_VALUE))
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addComponent(jScrollPane7))
                .addGap(0, 135, Short.MAX_VALUE))
        );

        jTabbedPessoas.addTab("Pessoas", panel3);

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jTabbedPessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPessoas, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPessoas.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void entidadeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entidadeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entidadeFieldActionPerformed

    private void descricaoEventoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descricaoEventoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descricaoEventoFieldActionPerformed

    private void nomePessoaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomePessoaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomePessoaFieldActionPerformed

    private void txtEventosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEventosKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEventosKeyTyped

    private void btnGerarBlocoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarBlocoActionPerformed
        // TODO add your handling code here:
        try {

            // Cria a Merkle Tree para os elementos adicionados
            mt = new MerkleTree(lstBuffer);
            
            merkleGraphics1.setMerkle(mt);

            bloco.add(mt.getRoot(), (int) spNovoBlockDificuldade.getValue());

            // Salva a Merkle Tree em um arquivo (mantém esta funcionalidade)
            mt.saveToFile(bloco.getLastBlockHash() + ".mkt");

            // Atualiza a lista gráfica de blocos
            DefaultListModel model = new DefaultListModel();
            for (Block elem : bloco.getChain()) {
                model.addElement(elem);
            }

            lstBlockchain.setModel(model);
            JOptionPane.showMessageDialog(this, "Novo bloco gerado!"); // Corrigido o showMessageDialog

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(FormAntigo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGerarBlocoActionPerformed

    private void txtFileNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFileNameKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFileNameKeyTyped

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser(new File("."));

        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                bloco.save(fc.getSelectedFile().getAbsolutePath());
                txtFileName.setText(fc.getSelectedFile().getAbsolutePath());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(FormAntigo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btSaveActionPerformed

    private void btLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoadActionPerformed
        // Selecionar arquivo através do JFileChooser
        JFileChooser fc = new JFileChooser(new File(txtFileName.getText()));
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                // Carregar a blockchain a partir do arquivo selecionado
                bloco.load(fc.getSelectedFile().getAbsolutePath());

                txtFileName.setText(fc.getSelectedFile().getAbsolutePath());

                // Limpar o campo de texto `txtEventos` para garantir que ele esteja vazio antes de listar os eventos
                txtEventos.setText("");

                
                // Atualizar a lista gráfica de blocos
                DefaultListModel model = new DefaultListModel();

                lstEventos.clear();
                Set<String> eventosAdicionados = new HashSet<>();

                for (Block b : bloco.getChain()) {
                    // Adicionar o bloco ao modelo da lista gráfica
                    model.addElement(b);
                    // Carregar a Merkle Tree a partir do arquivo associado ao bloco
                    MerkleTree mt = MerkleTree.loadFromFile(b.calculateHash() + ".mkt");

                    // Adicionar cada evento individualmente ao campo txtEventos e extrair os nomes
                    for (Object obj : mt.getElements()) {
                        String eventoStr = (String) obj;  // Tratar o evento como String
                        String[] partes = eventoStr.split(" \\| ");
                        if (partes.length == 3) {
                            String nomePessoa = partes[0].trim();
                            String descricao = partes[1].trim();
                            String entidade = partes[2].trim();

                            // Criar um novo objeto Evento
                            Evento evento = new Evento(nomePessoa, descricao, entidade);
                            lstEventos.add(evento);
                            // Verificar se o evento já foi adicionado ao txtEventos
                            if (!eventosAdicionados.contains(evento.toString())) {
                                // Adicionar ao campo txtEventos
                                txtEventos.append(evento.toString() + "\n");

                                // Marcar o evento como adicionado
                                eventosAdicionados.add(evento.toString());

                                // Adicionar o nome da pessoa ao modelo da JList (evitar duplicatas)
                                if (!listModel.contains(evento.getNomePessoa())) {
                                    listModel.addElement(evento.getNomePessoa());
                                }
                            }
                        }
                    }

                }
                // Atualizar o modelo da lista gráfica da blockchain
                lstBlockchain.setModel(model);
                // Atualizar a JList de nomes
                lstPessoas.setModel(listModel);  // Associa o modelo de nomes à JList de pessoas

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(FormAntigo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btLoadActionPerformed

    private void lstBlockchainValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBlockchainValueChanged
        // TODO add your handling code here:
        try {
            Block b = (Block) lstBlockchain.getSelectedValues()[0];
            MerkleTree mt = MerkleTree.loadFromFile(b.calculateHash() + ".mkt");
            //txtNovoBloco.setText(mt.getElementsString());
            merkleGraphics1.setMerkle(mt);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(FormAntigo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lstBlockchainValueChanged

    private void jTabbedPessoasStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPessoasStateChanged
        // TODO add your handling code here:

        // Verifica se 'bloco' foi inicializado
        if (bloco == null) {
            return;  // Saia do método se bloco for nulo
        }

        /* // Percorre todos os blocos na blockchain
        for (Block bloco : bloco.getChain()) {
            // O campo data contém a string no formato "nomePessoa | descricao | entidade"
            String eventoStr = bloco.getData();  // Obtém a string de dados do bloco

            // Verifica se o campo data contém a estrutura correta
            if (eventoStr != null && !eventoStr.isEmpty()) {
                // Divide a string para separar os campos (nomePessoa, descricao, entidade)
                String[] partesEvento = eventoStr.split(" \\| ");
                if (partesEvento.length > 0) {
                    String nomePessoa = partesEvento[0];  // Nome da pessoa está na primeira parte
                    nomesPessoas.add(nomePessoa);  // Adiciona o nome ao Set (sem duplicatas)
                }
            }
        }*/

    }//GEN-LAST:event_jTabbedPessoasStateChanged

    private void lstPessoasValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstPessoasValueChanged
        // TODO add your handling code here:
        // Capturar a pessoa selecionada
    String pessoaSelecionada = lstPessoas.getSelectedValue();

    if (pessoaSelecionada != null) {
        // Limpar o campo de eventos antes de exibir os eventos filtrados
        txtCurriculums.setText("");

        // Percorrer a lista de eventos e exibir apenas os eventos da pessoa selecionada
        for (Evento evento : lstEventos) {
            if (evento.getNomePessoa().equals(pessoaSelecionada)) {
                // Adicionar o evento ao txtEventos
                txtCurriculums.append(evento.toString() + "\n");
            }
        }
    }
    }//GEN-LAST:event_lstPessoasValueChanged

    private void txtCurriculumsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCurriculumsKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCurriculumsKeyTyped

    private void addEventoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEventoButtonActionPerformed
        // TODO add your handling code here:
        String nomePessoa = nomePessoaField.getText();
        String descricao = descricaoEventoField.getText();
        String entidade = entidadeField.getText();
        if (!nomePessoa.isEmpty() && !descricao.isEmpty() && !entidade.isEmpty()) {
            // Criar o evento
            Evento evento = new Evento(nomePessoa, descricao, entidade);

            // Adicionar o nome da pessoa ao DefaultListModel existente
            if (!listModel.contains(nomePessoa)) {
                listModel.addElement(nomePessoa);
                lstPessoas.setModel(listModel);  // Associar o modelo à JList
            }
            lstBuffer.add(evento);
            lstEventos.add(evento);
            // Formatar o evento como string e adicionar ao campo de texto para visualização
            txtEventos.append(evento.toString() + "\n");
            // Limpar os campos de texto
            nomePessoaField.setText("");
            descricaoEventoField.setText("");

        } else {
            JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos.");
        }


    }//GEN-LAST:event_addEventoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAntigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAntigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAntigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAntigo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormAntigo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEventoButton;
    private javax.swing.JButton btLoad;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btnGerarBloco;
    private javax.swing.JTextField descricaoEventoField;
    private javax.swing.JTextField entidadeField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPessoas;
    private javax.swing.JList<String> lstBlockchain;
    private javax.swing.JList<String> lstPessoas;
    private blockchain.GUI.MerkleGraphics merkleGraphics1;
    private javax.swing.JTextField nomePessoaField;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.Panel panel3;
    private javax.swing.JSpinner spNovoBlockDificuldade;
    private javax.swing.JTextArea txtCurriculums;
    private javax.swing.JTextArea txtEventos;
    private javax.swing.JTextField txtFileName;
    private javax.swing.JPanel viewCurrListPanel;
    // End of variables declaration//GEN-END:variables
}
