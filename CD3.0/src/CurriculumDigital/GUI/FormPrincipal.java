//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 
//::                                                                         ::
//::     Antonio Manuel Rodrigues Manso                                      ::
//::                                                                         ::
//::     I N S T I T U T O    P O L I T E C N I C O   D E   T O M A R        ::
//::     Escola Superior de Tecnologia de Tomar                              ::
//::     e-mail: manso@ipt.pt                                                ::
//::     url   : http://orion.ipt.pt/~manso                                  ::
//::                                                                         ::
//::     This software was build with the purpose of investigate and         ::
//::     learning.                                                           ::
//::                                                                         ::
//::                                                               (c)2015   ::
//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
//////////////////////////////////////////////////////////////////////////////
package CurriculumDigital.GUI;

import CurriculumDigital.Core.Evento;
import p2p.*;
import CurriculumDigital.Core.User;
import blockchain.utils.Block;
import blockchain.utils.BlockChain;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.rmi.Naming;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import blockchain.utils.GuiUtils;
import blockchain.utils.MerkleTree;
import blockchain.utils.RMI;
import java.io.File;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import miner.Miner;

/**
 *
 * @author zulu
 */
public class FormPrincipal extends javax.swing.JFrame implements P2Plistener {

    OremoteP2P myremoteObject;

    String multicastAddress = "224.0.0.1"; // multicast Address
    int port = 5000; // multicast port
    User authenticatedUser;

    public FormPrincipal(int port) {
        this();
        Dimension tamanhoTela = Toolkit.getDefaultToolkit().getScreenSize();
        int largura = (int) tamanhoTela.getWidth() / 6;
        int altura = (int) tamanhoTela.getHeight() / 6;
        setLocation(largura * port, altura * port);

        txtPort.setText(10010 + port + "");
        btStartServerActionPerformed(null);

        txtPublicKey.setVisible(false);
        btLoginAluno.setVisible(false);

        setVisibility(false);

    }

    /**
     * Creates new form MessengerGUI
     */
    public FormPrincipal() {
        initComponents();
        txtPublicKey.setVisible(false);
        btLoginAluno.setVisible(false);

        setVisibility(false);
        try {
            txtAddress.setText(InetAddress.getLocalHost().getHostAddress());
        } catch (UnknownHostException ex) {
            txtAddress.setText("Localhost");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        tpMain = new javax.swing.JTabbedPane();
        pnServer = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        btStartServer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        txtAddress = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        txtObjectName = new javax.swing.JTextField();
        imgServerRunning = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServerLog = new javax.swing.JTextPane();
        pnNetwork = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNetwork = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        txtNodeAddress = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        pnLogin = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        panel1 = new java.awt.Panel();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtLoginPass = new javax.swing.JPasswordField();
        txtLoginUser = new javax.swing.JTextField();
        btLogin = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstUsers = new javax.swing.JList<>();
        btAluno = new javax.swing.JButton();
        btEntidade = new javax.swing.JButton();
        txtPublicKey = new javax.swing.JLabel();
        btLoginAluno = new javax.swing.JButton();
        pnRegistar = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtRegisterUser = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtRegisterPass = new javax.swing.JPasswordField();
        btRegister = new javax.swing.JButton();
        pnCurriculo = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        btAddTransaction = new javax.swing.JButton();
        nomePessoaField = new javax.swing.JTextField();
        descricaoEventoField = new javax.swing.JTextField();
        entidadeField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtListTransdactions = new javax.swing.JTextArea();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtLogMining = new javax.swing.JTextArea();
        jPanel19 = new javax.swing.JPanel();
        lblMining = new javax.swing.JLabel();
        lblWinner = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        btMining = new javax.swing.JButton();
        spZeros = new javax.swing.JSpinner();
        pnBlockchain = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        txtBlockHeader = new javax.swing.JTextArea();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        txtBlockTransactions = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        lstBlcockchain = new javax.swing.JList<>();
        pnMerkleTree = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        lstMerkleTree = new javax.swing.JList<>();
        merkleGraphics1 = new blockchain.GUI.MerkleGraphics();
        pnAbout = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        pnLogout = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        txtExceptionLog = new javax.swing.JLabel();
        txtTimeLog = new javax.swing.JLabel();
        txtTitleLog = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jPanel12.setLayout(new java.awt.BorderLayout());

        jPanel10.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.BorderLayout());
        jPanel10.add(jPanel14, java.awt.BorderLayout.PAGE_START);

        jPanel12.add(jPanel10, java.awt.BorderLayout.WEST);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tpMain.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpMainStateChanged(evt);
            }
        });

        pnServer.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout(10, 10));

        btStartServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/startServer.png"))); // NOI18N
        btStartServer.setText("Start");
        btStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartServerActionPerformed(evt);
            }
        });
        jPanel3.add(btStartServer, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.GridLayout(3, 0));

        txtAddress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtAddress.setText("localhost");
        txtAddress.setBorder(javax.swing.BorderFactory.createTitledBorder("Address"));
        txtAddress.setPreferredSize(new java.awt.Dimension(200, 36));
        jPanel7.add(txtAddress);

        txtPort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtPort.setText("10010");
        txtPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port Number"));
        txtPort.setPreferredSize(new java.awt.Dimension(200, 36));
        jPanel7.add(txtPort);

        txtObjectName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtObjectName.setText("remoteP2P");
        txtObjectName.setBorder(javax.swing.BorderFactory.createTitledBorder("ObjectName"));
        jPanel7.add(txtObjectName);

        jPanel3.add(jPanel7, java.awt.BorderLayout.CENTER);

        imgServerRunning.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/loading_green.gif"))); // NOI18N
        imgServerRunning.setEnabled(false);
        jPanel3.add(imgServerRunning, java.awt.BorderLayout.EAST);

        pnServer.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        txtServerLog.setBorder(javax.swing.BorderFactory.createTitledBorder("Log Server"));
        txtServerLog.setFont(new java.awt.Font("Courier New", 0, 12)); // NOI18N
        jScrollPane1.setViewportView(txtServerLog);

        pnServer.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        tpMain.addTab("Server", new javax.swing.ImageIcon(getClass().getResource("/multimedia/server_32.png")), pnServer); // NOI18N

        pnNetwork.setLayout(new java.awt.BorderLayout());

        txtNetwork.setEditable(false);
        txtNetwork.setColumns(20);
        txtNetwork.setRows(5);
        txtNetwork.setBorder(javax.swing.BorderFactory.createTitledBorder("Network Nodes"));
        jScrollPane2.setViewportView(txtNetwork);

        pnNetwork.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel5.setLayout(new java.awt.BorderLayout());

        txtNodeAddress.setText("//10.10.208.35:10010/remoteP2P");
        txtNodeAddress.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote Object Address"));
        txtNodeAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNodeAddressActionPerformed(evt);
            }
        });
        jPanel5.add(txtNodeAddress, java.awt.BorderLayout.CENTER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/startClient.jpg"))); // NOI18N
        jButton1.setText("Connect");
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel5.add(jButton1, java.awt.BorderLayout.WEST);

        pnNetwork.add(jPanel5, java.awt.BorderLayout.PAGE_START);

        tpMain.addTab("P2pNetwork", new javax.swing.ImageIcon(getClass().getResource("/multimedia/p2p_32.png")), pnNetwork); // NOI18N

        pnLogin.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());
        pnLogin.add(jPanel6, java.awt.BorderLayout.PAGE_START);

        lblUsername.setText("Username:");

        lblPassword.setText("Password:");

        txtLoginPass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        txtLoginUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btLogin.setText("Login");
        btLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoginActionPerformed(evt);
            }
        });

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Users"));

        lstUsers.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        lstUsers.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstUsersValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(lstUsers);

        btAluno.setText("Aluno");
        btAluno.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btAlunoMouseClicked(evt);
            }
        });
        btAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAlunoActionPerformed(evt);
            }
        });

        btEntidade.setText("Entidade");
        btEntidade.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btEntidadeMouseClicked(evt);
            }
        });
        btEntidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEntidadeActionPerformed(evt);
            }
        });

        txtPublicKey.setText("publickey");

        btLoginAluno.setText("Login");
        btLoginAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLoginAlunoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panel1Layout.createSequentialGroup()
                                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(lblUsername, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtLoginPass, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btEntidade, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btLogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btLoginAluno, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGap(204, 204, 204)
                        .addComponent(txtPublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btEntidade, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(33, 33, 33)
                        .addComponent(txtPublicKey, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLoginUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLoginPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btLoginAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53))
        );

        pnLogin.add(panel1, java.awt.BorderLayout.LINE_START);

        tpMain.addTab("Login", new javax.swing.ImageIcon(getClass().getResource("/multimedia/5238442-3.png")), pnLogin); // NOI18N

        pnRegistar.setLayout(new java.awt.BorderLayout());

        jLabel3.setText("Username");

        txtRegisterUser.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel4.setText("password");

        txtRegisterPass.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btRegister.setText("Registar");
        btRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegisterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(460, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRegisterPass))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(307, 307, 307))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegisterPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(btRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(286, Short.MAX_VALUE))
        );

        pnRegistar.add(jPanel2, java.awt.BorderLayout.CENTER);

        tpMain.addTab("Registar", new javax.swing.ImageIcon(getClass().getResource("/multimedia/png-transparent-computer-icons-user-icon-design-patient-miscellaneous-balance-symbol-2.png")), pnRegistar); // NOI18N

        pnCurriculo.setLayout(new java.awt.BorderLayout());

        btAddTransaction.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/transaction_64.png"))); // NOI18N
        btAddTransaction.setText("Add");
        btAddTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddTransactionActionPerformed(evt);
            }
        });

        nomePessoaField.setToolTipText("");
        nomePessoaField.setBorder(javax.swing.BorderFactory.createTitledBorder("Nome da Pessoa"));
        nomePessoaField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nomePessoaFieldActionPerformed(evt);
            }
        });

        descricaoEventoField.setToolTipText("");
        descricaoEventoField.setBorder(javax.swing.BorderFactory.createTitledBorder("Descrição do Evento"));
        descricaoEventoField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descricaoEventoFieldActionPerformed(evt);
            }
        });

        entidadeField.setEditable(false);
        entidadeField.setToolTipText("");
        entidadeField.setBorder(javax.swing.BorderFactory.createTitledBorder("Entidade Certificadora"));
        entidadeField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entidadeFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(entidadeField, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                    .addComponent(nomePessoaField)
                    .addComponent(descricaoEventoField))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 238, Short.MAX_VALUE)
                .addComponent(btAddTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btAddTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addComponent(descricaoEventoField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nomePessoaField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(entidadeField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnCurriculo.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        jPanel16.setLayout(new java.awt.BorderLayout());

        txtListTransdactions.setEditable(false);
        txtListTransdactions.setColumns(20);
        txtListTransdactions.setRows(5);
        txtListTransdactions.setText("eventos..");
        txtListTransdactions.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de eventos"));
        jScrollPane3.setViewportView(txtListTransdactions);
        txtListTransdactions.getAccessibleContext().setAccessibleName("");

        jPanel16.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel17.setLayout(new java.awt.BorderLayout());

        jPanel18.setLayout(new java.awt.BorderLayout());

        txtLogMining.setEditable(false);
        txtLogMining.setColumns(20);
        txtLogMining.setRows(5);
        txtLogMining.setBorder(javax.swing.BorderFactory.createTitledBorder("Miner Log"));
        jScrollPane5.setViewportView(txtLogMining);

        jPanel18.add(jScrollPane5, java.awt.BorderLayout.CENTER);

        jPanel19.setLayout(new java.awt.BorderLayout());

        lblMining.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/working.gif"))); // NOI18N
        lblMining.setText("mining");
        jPanel19.add(lblMining, java.awt.BorderLayout.CENTER);

        lblWinner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/winner.gif"))); // NOI18N
        jPanel19.add(lblWinner, java.awt.BorderLayout.EAST);

        jPanel18.add(jPanel19, java.awt.BorderLayout.SOUTH);

        jPanel17.add(jPanel18, java.awt.BorderLayout.CENTER);

        jPanel20.setLayout(new java.awt.BorderLayout());

        btMining.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/1924692-2.png"))); // NOI18N
        btMining.setText("Gerar Bloco");
        btMining.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btMiningActionPerformed(evt);
            }
        });
        jPanel20.add(btMining, java.awt.BorderLayout.CENTER);

        spZeros.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        spZeros.setModel(new javax.swing.SpinnerNumberModel(3, 0, 6, 1));
        spZeros.setBorder(javax.swing.BorderFactory.createTitledBorder("Nº Zeros"));
        jPanel20.add(spZeros, java.awt.BorderLayout.EAST);

        jPanel17.add(jPanel20, java.awt.BorderLayout.PAGE_START);

        jPanel16.add(jPanel17, java.awt.BorderLayout.WEST);

        pnCurriculo.add(jPanel16, java.awt.BorderLayout.CENTER);

        tpMain.addTab("Curriculo", new javax.swing.ImageIcon(getClass().getResource("/multimedia/7891770-2.png")), pnCurriculo); // NOI18N

        pnBlockchain.setLayout(new java.awt.BorderLayout());

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Block Data"));
        jPanel8.setLayout(new java.awt.BorderLayout());

        jPanel9.setLayout(new java.awt.BorderLayout());

        jScrollPane7.setPreferredSize(new java.awt.Dimension(252, 105));

        txtBlockHeader.setEditable(false);
        txtBlockHeader.setColumns(20);
        txtBlockHeader.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtBlockHeader.setRows(5);
        txtBlockHeader.setBorder(javax.swing.BorderFactory.createTitledBorder("Header"));
        jScrollPane7.setViewportView(txtBlockHeader);

        jPanel9.add(jScrollPane7, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel9, java.awt.BorderLayout.WEST);

        jPanel11.setLayout(new java.awt.BorderLayout());

        jScrollPane6.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Transactions"));

        txtBlockTransactions.setEditable(false);
        txtBlockTransactions.setColumns(20);
        txtBlockTransactions.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        txtBlockTransactions.setRows(5);
        jScrollPane6.setViewportView(txtBlockTransactions);

        jPanel11.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        jPanel8.add(jPanel11, java.awt.BorderLayout.CENTER);

        pnBlockchain.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        lstBlcockchain.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lstBlcockchain.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstBlcockchainValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(lstBlcockchain);

        pnBlockchain.add(jScrollPane8, java.awt.BorderLayout.CENTER);

        tpMain.addTab("Blockchain", new javax.swing.ImageIcon(getClass().getResource("/multimedia/blockchain_32.png")), pnBlockchain); // NOI18N

        lstMerkleTree.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstMerkleTreeValueChanged(evt);
            }
        });
        jScrollPane12.setViewportView(lstMerkleTree);

        javax.swing.GroupLayout merkleGraphics1Layout = new javax.swing.GroupLayout(merkleGraphics1);
        merkleGraphics1.setLayout(merkleGraphics1Layout);
        merkleGraphics1Layout.setHorizontalGroup(
            merkleGraphics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 537, Short.MAX_VALUE)
        );
        merkleGraphics1Layout.setVerticalGroup(
            merkleGraphics1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 395, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnMerkleTreeLayout = new javax.swing.GroupLayout(pnMerkleTree);
        pnMerkleTree.setLayout(pnMerkleTreeLayout);
        pnMerkleTreeLayout.setHorizontalGroup(
            pnMerkleTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMerkleTreeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(merkleGraphics1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnMerkleTreeLayout.setVerticalGroup(
            pnMerkleTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMerkleTreeLayout.createSequentialGroup()
                .addGroup(pnMerkleTreeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnMerkleTreeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(merkleGraphics1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        tpMain.addTab("MerkleTree", new javax.swing.ImageIcon(getClass().getResource("/multimedia/848628-2.png")), pnMerkleTree); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/IMG_0572-2-3.png"))); // NOI18N
        jLabel1.setText("(c) Cristiane Mayabanza\nTurma: A \nN°: 24639");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/joao-2.jpg"))); // NOI18N
        jLabel2.setText("(c) Joao Campos\nTurma: A \nN°: 25269");

        javax.swing.GroupLayout pnAboutLayout = new javax.swing.GroupLayout(pnAbout);
        pnAbout.setLayout(pnAboutLayout);
        pnAboutLayout.setHorizontalGroup(
            pnAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAboutLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 372, Short.MAX_VALUE))
            .addGroup(pnAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnAboutLayout.setVerticalGroup(
            pnAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnAboutLayout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 125, Short.MAX_VALUE))
        );

        tpMain.addTab("About", new javax.swing.ImageIcon(getClass().getResource("/multimedia/about.png")), pnAbout); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/multimedia/1828407-2.png"))); // NOI18N
        jButton2.setText("Sair");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnLogoutLayout = new javax.swing.GroupLayout(pnLogout);
        pnLogout.setLayout(pnLogoutLayout);
        pnLogoutLayout.setHorizontalGroup(
            pnLogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnLogoutLayout.createSequentialGroup()
                .addGap(387, 387, 387)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(443, Short.MAX_VALUE))
        );
        pnLogoutLayout.setVerticalGroup(
            pnLogoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnLogoutLayout.createSequentialGroup()
                .addContainerGap(227, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165))
        );

        tpMain.addTab("", new javax.swing.ImageIcon(getClass().getResource("/multimedia/3094700-2.png")), pnLogout); // NOI18N

        getContentPane().add(tpMain, java.awt.BorderLayout.PAGE_START);

        jPanel15.setLayout(new java.awt.BorderLayout());

        txtExceptionLog.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtExceptionLog.setForeground(new java.awt.Color(255, 51, 102));
        txtExceptionLog.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txtExceptionLog.setText("Network node");
        txtExceptionLog.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel15.add(txtExceptionLog, java.awt.BorderLayout.CENTER);

        txtTimeLog.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtTimeLog.setText("00:00:00.000");
        jPanel15.add(txtTimeLog, java.awt.BorderLayout.WEST);

        txtTitleLog.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtTitleLog.setText("                                                     ");
        jPanel15.add(txtTitleLog, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel15, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            String address = txtNodeAddress.getText();
            IremoteP2P node = (IremoteP2P) RMI.getRemote(address);
            myremoteObject.addNode(node);
        } catch (MalformedURLException | NotBoundException | RemoteException ex) {
            onException(ex, "connect");
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtNodeAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNodeAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNodeAddressActionPerformed

    private void btStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartServerActionPerformed
        try {
            int serverPort = Integer.parseInt(txtPort.getText());
            String name = txtObjectName.getText();

            //local adress of server
            String host = txtAddress.getText().trim(); //
            //create registry to object
            LocateRegistry.createRegistry(serverPort);
            //create adress of remote object
            String address = String.format("//%s:%d/%s", host, serverPort, name);
            myremoteObject = new OremoteP2P(address, this);
            //link adress to object
            Naming.rebind(address, myremoteObject);

            onBlockchainUpdate(myremoteObject.getBlockchain());
        } catch (NumberFormatException | MalformedURLException | RemoteException ex) {
            onException(ex, "Starting server");
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btStartServerActionPerformed

    private void btLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoginActionPerformed
        new Thread(() -> {
            try {
                String username = txtLoginUser.getText();
                String password = new String(txtLoginPass.getPassword());

                if (username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Preencha todos os campos!");
                    return;
                }

                // Autenticar o utilizador
                boolean success = myremoteObject.authenticate(username, password);

                if (success) {

                    JOptionPane.showMessageDialog(this, "Login bem-sucedido!");
                    authenticatedUser = new User(username);
                    authenticatedUser.load(password); // Carrega as chaves do utilizador autenticado
                    entidadeField.setText(authenticatedUser.getName());

                    // Após login bem-sucedido ou carregamento da blockchain
                    setVisibility(true);
                    loadMerkleTreesToList();
                    setupMerkleTreeSelectionListener();
                    tpMain.setSelectedComponent(pnCurriculo);
                    txtLoginUser.setText("");
                    txtLoginPass.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Usuário ou senha incorretos!");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao autenticar o utilizador: " + ex.getMessage());
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }//GEN-LAST:event_btLoginActionPerformed

    private void lstUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstUsersValueChanged
        if (!evt.getValueIsAdjusting()) {
            // Obter o valor selecionado da lista
            String selectedUser = (String) lstUsers.getSelectedValue();

            // Verificar se há um item selecionado antes de definir o valor no campo de texto
            if (selectedUser != null) {
                txtLoginUser.setText(selectedUser);
            }
        }
    }//GEN-LAST:event_lstUsersValueChanged

    private void btAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAlunoActionPerformed
        // TODO add your handling code here:
        
        loadPessoasFromBlockchain();
        btLogin.setVisible(false);
        btLoginAluno.setVisible(true);
        txtLoginPass.setVisible(false);
        lblPassword.setVisible(false);
        lblUsername.setText("Nome completo:");
    }//GEN-LAST:event_btAlunoActionPerformed

    private void btEntidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEntidadeActionPerformed
        // TODO add your handling code here:
        loadUsersFromKeysFolder();
        btLogin.setVisible(true);
        btLoginAluno.setVisible(false);
        txtLoginPass.setVisible(true);
        lblPassword.setVisible(true);
    }//GEN-LAST:event_btEntidadeActionPerformed

    private void btLoginAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLoginAlunoActionPerformed
        try {
            // Obter o nome do aluno fornecido
            String nomeAluno = txtLoginUser.getText();

            // Verificar se o nome está vazio
            if (nomeAluno == null || nomeAluno.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, insira o nome do aluno.");
                return;
            }

            // Usar o método remoto para buscar os eventos relacionados ao aluno
            List<Evento> eventosDoAluno = myremoteObject.getEventosParaPessoaAutenticada(nomeAluno);

            // Verificar se o aluno foi encontrado na blockchain
            if (eventosDoAluno.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Aluno não encontrado na blockchain.");
                return;
            }

            // Se o aluno foi encontrado, abrir o formulário do aluno
            new FormAluno(nomeAluno, eventosDoAluno).setVisible(true);
            this.setVisible(false);

        } catch (Exception ex) {
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Erro ao verificar o aluno: " + ex.getMessage());
        }
    }//GEN-LAST:event_btLoginAlunoActionPerformed

    private void btRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegisterActionPerformed

        new Thread(() -> {

            try {
                String username = txtRegisterUser.getText();
                String password = new String(txtRegisterPass.getPassword());

                if (username.isEmpty() || password.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Preencha todos os campos!");
                    return;
                }

                // Registrar o utilizador
                boolean success = myremoteObject.register(username, password);

                if (success) {
                    JOptionPane.showMessageDialog(this, "Utilizador registrado com sucesso!");
                    txtRegisterUser.setText("");
                    txtRegisterPass.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Utilizador já existe!");

                }
            } catch (Exception ex) {
                Logger.getLogger(FormPrincipal.class
                        .getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Erro ao criar o User!");
                txtRegisterUser.setText("");
                txtRegisterPass.setText("");
            }
        }).start();
    }//GEN-LAST:event_btRegisterActionPerformed

    private void tpMainStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpMainStateChanged
        // TODO add your handling code here:
        if (tpMain.getSelectedComponent() == pnLogin) {
            loadUsersFromKeysFolder(); // Atualiza a lista de utilizadores ao mudar para o painel de login
        } else if (tpMain.getSelectedComponent() == pnMerkleTree) {
            loadUsersFromKeysFolder(); // Atualiza a lista de utilizadores ao mudar para o painel de login
        }
    }//GEN-LAST:event_tpMainStateChanged

    private void lstBlcockchainValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstBlcockchainValueChanged
        try {
            BlockChain bc = myremoteObject.getBlockchain();
            int index = bc.getSize() - lstBlcockchain.getSelectedIndex() - 1;
            if (index < 0 || index >= bc.getSize()) {
                return;
            }

            Block selected = bc.get(index);
            txtBlockHeader.setText(selected.getHeaderString());
            txtBlockHeader.setCaretPosition(0);
            txtBlockTransactions.setText(selected.getTransactionsString());
            txtBlockTransactions.setCaretPosition(0);

        } catch (RemoteException ex) {
            onException(ex, "list selection");
        }
    }//GEN-LAST:event_lstBlcockchainValueChanged

    private void btAddTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddTransactionActionPerformed
        try {
            String nomePessoa = nomePessoaField.getText().trim();
            String descricao = descricaoEventoField.getText().trim();

            if (nomePessoa.isEmpty() || descricao.isEmpty()) {
                SwingUtilities.invokeLater(() -> JOptionPane.showMessageDialog(this, "Por favor, preencha todos os campos."));
                return;
            }

            Evento evento = new Evento(authenticatedUser, nomePessoa, descricao);

            myremoteObject.addTransaction(evento.toString());
        } catch (RemoteException ex) {
            onException(ex, "transactions");
            Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btAddTransactionActionPerformed

    private void btMiningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btMiningActionPerformed

        new Thread(() -> {
            try {
                //fazer um bloco
                List<String> blockTransactions = myremoteObject.getTransactions();
                if (blockTransactions.size() < 0) {
                    return;
                }
                Block b = new Block(myremoteObject.getBlockchainLastHash(), blockTransactions);
                //remover as transacoes
                myremoteObject.removeTransactions(blockTransactions);
                //minar o bloco
                int zeros = (Integer) spZeros.getValue();
                int nonce = myremoteObject.mine(b.getMinerData(), zeros);
                //atualizar o nonce
                b.setNonce(nonce, zeros);
                //adiconar o bloco
                myremoteObject.addBlock(b);
                loadMerkleTreesToList();
                setupMerkleTreeSelectionListener();

            } catch (Exception ex) {
                onException(ex, "Start ming");
                Logger.getLogger(NodeP2PGui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();

    }//GEN-LAST:event_btMiningActionPerformed

    private void nomePessoaFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nomePessoaFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nomePessoaFieldActionPerformed

    private void descricaoEventoFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descricaoEventoFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_descricaoEventoFieldActionPerformed

    private void entidadeFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entidadeFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entidadeFieldActionPerformed

    private void lstMerkleTreeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstMerkleTreeValueChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_lstMerkleTreeValueChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        setVisibility(false);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btEntidadeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btEntidadeMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btEntidadeMouseClicked

    private void btAlunoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btAlunoMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_btAlunoMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddTransaction;
    private javax.swing.JButton btAluno;
    private javax.swing.JButton btEntidade;
    private javax.swing.JButton btLogin;
    private javax.swing.JButton btLoginAluno;
    private javax.swing.JButton btMining;
    private javax.swing.JButton btRegister;
    private javax.swing.JButton btStartServer;
    private javax.swing.JTextField descricaoEventoField;
    private javax.swing.JTextField entidadeField;
    private javax.swing.JLabel imgServerRunning;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblMining;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblWinner;
    private javax.swing.JList<String> lstBlcockchain;
    private javax.swing.JList<String> lstMerkleTree;
    private javax.swing.JList<String> lstUsers;
    private blockchain.GUI.MerkleGraphics merkleGraphics1;
    private javax.swing.JTextField nomePessoaField;
    private java.awt.Panel panel1;
    private javax.swing.JPanel pnAbout;
    private javax.swing.JPanel pnBlockchain;
    private javax.swing.JPanel pnCurriculo;
    private javax.swing.JPanel pnLogin;
    private javax.swing.JPanel pnLogout;
    private javax.swing.JPanel pnMerkleTree;
    private javax.swing.JPanel pnNetwork;
    private javax.swing.JPanel pnRegistar;
    private javax.swing.JPanel pnServer;
    private javax.swing.JSpinner spZeros;
    private javax.swing.JTabbedPane tpMain;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextArea txtBlockHeader;
    private javax.swing.JTextArea txtBlockTransactions;
    private javax.swing.JLabel txtExceptionLog;
    private javax.swing.JTextArea txtListTransdactions;
    private javax.swing.JTextArea txtLogMining;
    private javax.swing.JPasswordField txtLoginPass;
    private javax.swing.JTextField txtLoginUser;
    private javax.swing.JTextArea txtNetwork;
    private javax.swing.JTextField txtNodeAddress;
    private javax.swing.JTextField txtObjectName;
    private javax.swing.JTextField txtPort;
    private javax.swing.JLabel txtPublicKey;
    private javax.swing.JPasswordField txtRegisterPass;
    private javax.swing.JTextField txtRegisterUser;
    private javax.swing.JTextPane txtServerLog;
    private javax.swing.JLabel txtTimeLog;
    private javax.swing.JLabel txtTitleLog;
    // End of variables declaration//GEN-END:variables

    @Override
    public void onStartRemote(String message) {
        setTitle(message);
        imgServerRunning.setEnabled(true);
        btStartServer.setEnabled(false);
        GuiUtils.addText(txtServerLog, "Start server", message);

    }
    static DateTimeFormatter hfmt = DateTimeFormatter.ofPattern("HH:mm:ss.SSS");

    public void onException(Exception e, String title) {
        txtTimeLog.setText(LocalTime.now().format(hfmt));
        txtExceptionLog.setForeground(new java.awt.Color(255, 0, 0));
        txtExceptionLog.setText(e.getMessage());
        txtTitleLog.setText(title);
        // JOptionPane.showMessageDialog(this, e.getMessage(), title, JOptionPane.WARNING_MESSAGE);
    }

    @Override
    public void onMessage(String title, String message) {
        GuiUtils.addText(txtServerLog, title, message);
        tpMain.setSelectedComponent(pnServer);
    }

    @Override
    public void onConect(String address) {
        try {
            List<IremoteP2P> net = myremoteObject.getNetwork();
            String txt = "";
            for (IremoteP2P iremoteP2P : net) {
                txt += iremoteP2P.getAdress() + "\n";
            }
            txtNetwork.setText(txt);
            tpMain.setSelectedComponent(pnLogin);
        } catch (RemoteException ex) {
            onException(ex, "On conect");
            Logger
                    .getLogger(NodeP2PGui.class
                            .getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Override
    public void onTransaction(String transaction) {
        try {
            onMessage("Transaction ", transaction);
            String txt = "";
            List<String> tr = myremoteObject.getTransactions();
            for (String string : tr) {
                txt += string + "\n";
            }
            txtListTransdactions.setText(txt);
            tpMain.setSelectedComponent(pnCurriculo);
        } catch (RemoteException ex) {
            onException(ex, "on transaction");
            Logger
                    .getLogger(NodeP2PGui.class
                            .getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void onStartMining(String message, int zeros) {
        SwingUtilities.invokeLater(() -> {
            tpMain.setSelectedComponent(pnCurriculo);
            btMining.setEnabled(false);
            lblMining.setVisible(true);
            lblWinner.setVisible(false);
            txtLogMining.setText("[START]" + message + "[" + zeros + "]\n");
            lblMining.setText("mining " + zeros + " zeros");
            repaint();
        });
    }

    @Override
    public void onStopMining(String message, int nonce) {
        SwingUtilities.invokeLater(() -> {
            txtLogMining.setText("[STOP]" + message + "[" + nonce + "]\n" + txtLogMining.getText());
            lblMining.setVisible(false);
            tpMain.setSelectedComponent(pnCurriculo);
            btMining.setEnabled(true);
            txtLogMining.setText("Nounce Found [" + nonce + "]\n" + txtLogMining.getText());
            System.out.println(" NONCE " + nonce + "\t" + message);
            repaint();
        });
    }

    @Override
    public void onNounceFound(String message, int nonce) {
        try {
            myremoteObject.stopMining(nonce);

        } catch (RemoteException ex) {
            Logger.getLogger(NodeP2PGui.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
        SwingUtilities.invokeLater(() -> {
            txtLogMining.setText("Nounce Found [" + nonce + "]\n" + txtLogMining.getText());
            lblMining.setVisible(false);
            lblWinner.setText(message);
            lblWinner.setVisible(true);
            tpMain.setSelectedComponent(pnCurriculo);
            txtTitleLog.setText(Miner.getHash(myremoteObject.myMiner.getMessage(), myremoteObject.myMiner.getNonce()));
            repaint();
            System.out.println(" NONCE " + nonce + "\t" + message);
        });

    }

    @Override
    public void onBlockchainUpdate(BlockChain b) {
        SwingUtilities.invokeLater(() -> {
            DefaultListModel model = new DefaultListModel();
            for (int i = b.getSize() - 1; i >= 0; i--) {
                model.addElement(b.get(i));
            }
            lstBlcockchain.setModel(model);
            lstBlcockchain.setSelectedIndex(0);
            tpMain.setSelectedComponent(pnNetwork);
            repaint();
        });
    }

    private void loadUsersFromKeysFolder() {
        try {
            File keysFolder = new File("keys");

            // Cria um modelo para a lista de utilizadores
            DefaultListModel<String> userListModel = new DefaultListModel<>();

            // Lista os ficheiros .pub
            File[] publicKeyFiles = keysFolder.listFiles((dir, name) -> name.endsWith(".pub"));
            if (publicKeyFiles != null) {
                for (File file : publicKeyFiles) {
                    // Extrai o nome do utilizador
                    String fileName = file.getName();
                    String userName = fileName.substring(0, fileName.lastIndexOf('.'));
                    userListModel.addElement(userName);
                }
            }

            // Atualiza a JList com os nomes dos utilizadores
            lstUsers.setModel(userListModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os utilizadores: " + e.getMessage());
            Logger
                    .getLogger(FormPrincipal.class
                            .getName()).log(Level.SEVERE, null, e);
        }
    }

    private void loadMerkleTreesToList() {
        new Thread(() -> {
            try {
                if (myremoteObject == null) {
                    JOptionPane.showMessageDialog(this, "O servidor não está inicializado. Por favor, inicie o servidor primeiro.");
                    return;
                }

                // Obter os blocos da blockchain
                List<Block> blockchain = myremoteObject.getBlockchain().getChain();

                if (blockchain.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "A blockchain está vazia. Nenhum bloco foi encontrado.");
                    return;
                }

                // Criar o modelo para a JList
                DefaultListModel<String> model = new DefaultListModel<>();
                for (Block block : blockchain) {
                    model.addElement(block.getCurrentHash()); // Usar o hash atual do bloco
                }

                // Atualizar a JList com o modelo
                SwingUtilities.invokeLater(() -> lstMerkleTree.setModel(model));

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar os hashes da blockchain: " + ex.getMessage());
                Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }

    private void setupMerkleTreeSelectionListener() {
        lstMerkleTree.addListSelectionListener(evt -> {
            new Thread(() -> {
                if (!evt.getValueIsAdjusting()) {
                    try {
                        // Obter o hash selecionado na lista
                        String selectedHash = lstMerkleTree.getSelectedValue();

                        if (selectedHash != null) {
                            // Obter a Merkle Tree correspondente
                            MerkleTree selectedMerkleTree = myremoteObject.getMerkleTreeByBlock(selectedHash);

                            // Mostrar a Merkle Tree no gráfico
                            merkleGraphics1.setMerkle(selectedMerkleTree);
                            merkleGraphics1.repaint();
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(this, "Erro ao carregar a Merkle Tree: " + ex.getMessage());
                        Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }).start();
        });
    }

    private void setVisibility(boolean isAuthenticated) {
        tpMain.setEnabledAt(tpMain.indexOfComponent(pnCurriculo), isAuthenticated);
        tpMain.setEnabledAt(tpMain.indexOfComponent(pnBlockchain), isAuthenticated);
        tpMain.setEnabledAt(tpMain.indexOfComponent(pnMerkleTree), isAuthenticated);
        tpMain.setEnabledAt(tpMain.indexOfComponent(pnLogout), isAuthenticated);

        tpMain.setEnabledAt(tpMain.indexOfComponent(pnLogin), !isAuthenticated);
        tpMain.setEnabledAt(tpMain.indexOfComponent(pnRegistar), !isAuthenticated);

        // Define o painel inicial, dependendo do estado
        if (isAuthenticated) {
            tpMain.setSelectedComponent(pnCurriculo);
        } else {
            tpMain.setSelectedComponent(pnServer);
        }
    }

    private void loadPessoasFromBlockchain() {
        try {
            // Cria um modelo para a lista de utilizadores
            DefaultListModel<String> userListModel = new DefaultListModel<>();
            // Usar o método remoto para buscar os eventos relacionados ao aluno
            List<String> Alunos = myremoteObject.getPessoas();

            for (String aluno : Alunos) {
                // Extrai o nome do utilizador
                userListModel.addElement(aluno);
            }

            // Atualiza a JList com os nomes dos utilizadores
            lstUsers.setModel(userListModel);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar os utilizadores: " + e.getMessage());
            Logger
                    .getLogger(FormPrincipal.class
                            .getName()).log(Level.SEVERE, null, e);
        }
    }
}
